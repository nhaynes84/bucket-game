{"version":3,"sources":["components/Header.js","components/Buckets.js","components/Logs.js","components/BucketActions.js","helpers/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","marginBottom","Buckets","buckets","a","b","className","height","capacity","level","backgroundColor","Step","Steps","Logs","logs","length","direction","current","map","log","i","title","key","BucketActions","fillBucket","emptyBucket","transferBuckets","onClick","notifyBucketFull","bucket","notification","warning","message","toUpperCase","notifyBucketEmpty","App","totalSteps","onClose","initialBuckets","useState","setBuckets","setLogs","writeBucketLog","action","clearGame","open","duration","description","icon","type","color","targetBucket","from","to","availableSpace","remainingAmount","bucketTotal","buildNewBuckets","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b289befb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n    <header style={{ marginBottom: '50px' }}>\n        <h2>Game of Buckets</h2>\n        <h3>Try to make exactly 4 gallons of water.</h3>\n    </header>\n)\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Buckets = ({ buckets: { a, b } }) => (\n    <div className=\"bucketWrap\">\n        <div className=\"bucket\" style={{\n            height: `${a.capacity * 50}px`,\n        }}>\n            <div className={`bucketA bucketA-${a.capacity - a.level}`} style={{\n                backgroundColor: 'white'\n            }}></div>\n            <div className={`bucketA bucketA-${a.level}`} style={{\n                backgroundColor: '#B5CEDF'\n            }}></div>\n        </div>\n        <div>\n            <h6>Bucket A</h6>\n            <p>{a.level} of {a.capacity}</p>\n            <h6>Bucket B</h6>\n            <p>{b.level} of {b.capacity}</p>\n        </div>\n        <div className=\"bucket\" style={{\n            height: `${b.capacity * 50}px`,\n        }}\n        >\n            <div className={`bucketB bucketB-${b.capacity - b.level}`} style={{\n                backgroundColor: 'white'\n            }}></div>\n            <div className={`bucketB bucketB-${b.level}`} style={{\n                backgroundColor: '#50799E'\n            }}></div>\n        </div>\n    </div>\n);\n\nBuckets.propTypes = {\n    buckets: PropTypes.shape({\n        a: PropTypes.shape({\n            level: PropTypes.number,\n            capacity: PropTypes.number\n        }),\n        b: PropTypes.shape({\n            level: PropTypes.number,\n            capacity: PropTypes.number\n        })\n    })\n};\n\nexport default Buckets;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Steps } from 'antd';\n\nconst { Step } = Steps;\n\nconst Logs = ({ logs }) => (\n    <section className=\"logs\">\n        <h3>Steps</h3>\n        {logs.length ? <Steps\n            className=\"steps\"\n            direction=\"vertical\"\n            current={logs.length - 1}\n        >\n            {logs.map((log, i) => (\n                <Step title={log} key={i} />\n            ))}\n        </Steps> : 'Begin...'}\n    </section>\n);\n\nLogs.propTypes = {\n    logs: PropTypes.array,\n}\n\nexport default Logs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\n\nconst BucketActions = ({ fillBucket, emptyBucket, transferBuckets }) => (\n    <div className=\"actions\">\n        <div className=\"actionSet\">\n            <Button onClick={() => fillBucket('a')}>Fill Bucket A</Button>\n            <Button onClick={() => transferBuckets('a', 'b')}>Transfer to Bucket B</Button>\n            <Button onClick={() => emptyBucket('a')}>Empty Bucket A</Button>\n\n        </div>\n        <div className=\"actionSet\">\n            <Button onClick={() => fillBucket('b')}>Fill Bucket B</Button>\n            <Button onClick={() => transferBuckets('b', 'a')}>Transfer to Bucket A</Button>\n            <Button onClick={() => emptyBucket('b')}>Empty Bucket B</Button>\n        </div>\n    </div>\n);\n\nBucketActions.propTypes = {\n    fillBucket: PropTypes.func,\n    emptyBucket: PropTypes.func,\n    transferBuckets: PropTypes.func,\n};\n\nexport default BucketActions;","import React from 'react';\nimport { notification, Icon } from 'antd';\n\nexport const notifyBucketFull = bucket => notification.warning({ \n    message: `Bucket ${bucket.toUpperCase()} is already full.` \n});\n  \nexport const notifyBucketEmpty = bucket => notification.warning({ \n    message: `Bucket ${bucket.toUpperCase()} is already empty.` \n});\n  \nexport const notifySuccess = (totalSteps, onClose) => {\n    notification.open({\n      onClose,\n      duration: 0,\n      message: 'VICTORY!',\n      description: `You made 4 gallons in only ${totalSteps} steps!`,\n      icon: <Icon type=\"rocket\" style={{ color: '#52c41a' }} />\n    });\n  };\n\nexport const buildNewBuckets = (buckets = {}, from = 'a', to = 'b') => {\n    const availableSpace = buckets[to].capacity - buckets[to].level;\n    const remainingAmount = buckets[from].level - availableSpace;\n    const bucketTotal = buckets[from].level + buckets[to].level;\n\n    return {\n      [from]: {\n        capacity: buckets[from].capacity,\n        level: remainingAmount > 0 ? remainingAmount : 0\n      },\n      [to]: {\n        capacity: buckets[to].capacity,\n        level: remainingAmount > 0\n          ? bucketTotal - remainingAmount\n          : bucketTotal\n      }\n    };\n}","import React, { useState } from 'react';\nimport { Button } from 'antd';\n\nimport \"antd/dist/antd.css\";\nimport './App.css';\n\nimport Header from './components/Header';\nimport Buckets from './components/Buckets';\nimport Logs from './components/Logs';\nimport Actions from './components/BucketActions';\n\nimport { notifyBucketEmpty, notifyBucketFull, notifySuccess,\n  buildNewBuckets } from './helpers';\n\nconst App = () => {\n  const initialBuckets = { a: { capacity: 3, level: 0 }, b: { capacity: 5, level: 0 } };\n  const [buckets, setBuckets] = useState({ ...initialBuckets });\n  const [logs, setLogs] = useState([]);\n  \n  const writeBucketLog = (action, bucket) => setLogs([...logs, `${action} Bucket ${bucket}.`]);\n  const clearGame = () => {\n    setLogs([]);\n    setBuckets({ ...initialBuckets });\n  };\n\n  // IF bucket B has 4 gallons of water in it... You win, yay!\n  if (buckets['b'].level === 4) notifySuccess(logs.length, clearGame);\n\n  const fillBucket = targetBucket => {\n    const { level, capacity } = buckets[targetBucket];\n    if (level === capacity) return notifyBucketFull(targetBucket);\n\n    writeBucketLog('Fill', targetBucket.toUpperCase());\n    setBuckets({ ...buckets, ...{ [targetBucket]: { level: capacity, capacity } } });\n  };\n\n  const emptyBucket = targetBucket => {\n    const { level, capacity } = buckets[targetBucket];\n    if (!level) return notifyBucketEmpty(targetBucket);\n\n    writeBucketLog('Empty', targetBucket.toUpperCase());\n    setBuckets({ ...buckets, ...{ [targetBucket]: { level: 0, capacity } } });\n  };\n\n  const transferBuckets = (from, to) => {\n    // IF bucket to is full (no capacity for transfer)\n    if (buckets[to].capacity === buckets[to].level) return notifyBucketFull(to);\n\n    // IF bucket from is empty (nothing to transfer)\n    if (!buckets[from].level) return notifyBucketEmpty(from);\n\n    writeBucketLog('Transfer', `${from.toUpperCase()} to Bucket ${to.toUpperCase()}`)\n    return setBuckets(buildNewBuckets(buckets, from, to));\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <section className=\"game\">\n        <Buckets buckets={buckets} />\n        <Actions\n          fillBucket={fillBucket}\n          emptyBucket={emptyBucket}\n          transferBuckets={transferBuckets}\n        />\n        <Button onClick={clearGame}>\n          Restart\n        </Button>\n      </section>\n      <Logs logs={logs} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}